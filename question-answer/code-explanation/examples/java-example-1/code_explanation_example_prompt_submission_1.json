{
  "templateId": "https://github.com/ml4j/gtp-3-prompt-templates/blob/master/question-answer/code-explanation/templates/code_explanation_template_1.json",
  "promptId": "https://github.com/ml4j/gtp-3-prompt-templates/blob/master/question-answer/code-explanation/examples/java-example-1/code_explanation_example_prompt_1.json",
  "initialPromptText": "What does the code below do? Write one comment for each of the following numbered statements:\n\nStatement 1) stream().map(Dimension::getName).collect(Collectors.toList()).toString();\nStatement 2) stream().flatMap(c -> c.decompose().stream()).collect(Collectors.toList());\nStatement 3) allDecomposedAliases.add(decompose().stream().collect(Collectors.toList()));\nStatement 4) box.getScaledCorners(originalImage.getWidth(), originalImage.getHeight()));\nStatement 5) List<Image> subImages = channelConcatImages.subList(channelRangeStart, channelRangeEnd);\n\nComments:\n\nStatement 1) // Obtain the names of the dimensions, collect them into a list, and return the list as a string.\nStatement 2) // Call decompose recursively on each of the elements of the stream and collect the results into a list\nStatement 3) // Collect the aliases from the stream returned by the decompose() method into a list, and add them to allDecomposedAliases\nStatement 4) // Get the scaled corners of a bounding box using its width and height of the original image\nStatement 5) // Obtain a list of the elements of subImages with indexes been channelRangeStart (inclusive) and channelRangeEnd (exclusive) and assign the list to a local variable called subImages\n\nWhat does the code below do? Write one comment for each of the following numbered statements:\n\nStatement 1) List<User> friendsList = me.getFriends();\nStatement 2) List<User> genXFriends = friendsList.stream().filter(user.getAge() > 40 user.getAge() <= 55).collect(Collectiors.toList());\nStatement 3) genXFriends.forEach(user -> user.sendMessage(\"Hi \" + user.getScreenName() + \"you are the best!\");\n\nComments:\n\n",
  "submissionResults": [
    {
      "request": {
        "prompt": "What does the code below do? Write one comment for each of the following numbered statements:\n\nStatement 1) stream().map(Dimension::getName).collect(Collectors.toList()).toString();\nStatement 2) stream().flatMap(c -> c.decompose().stream()).collect(Collectors.toList());\nStatement 3) allDecomposedAliases.add(decompose().stream().collect(Collectors.toList()));\nStatement 4) box.getScaledCorners(originalImage.getWidth(), originalImage.getHeight()));\nStatement 5) List<Image> subImages = channelConcatImages.subList(channelRangeStart, channelRangeEnd);\n\nComments:\n\nStatement 1) // Obtain the names of the dimensions, collect them into a list, and return the list as a string.\nStatement 2) // Call decompose recursively on each of the elements of the stream and collect the results into a list\nStatement 3) // Collect the aliases from the stream returned by the decompose() method into a list, and add them to allDecomposedAliases\nStatement 4) // Get the scaled corners of a bounding box using its width and height of the original image\nStatement 5) // Obtain a list of the elements of subImages with indexes been channelRangeStart (inclusive) and channelRangeEnd (exclusive) and assign the list to a local variable called subImages\n\nWhat does the code below do? Write one comment for each of the following numbered statements:\n\nStatement 1) List<User> friendsList = me.getFriends();\nStatement 2) List<User> genXFriends = friendsList.stream().filter(user.getAge() > 40 user.getAge() <= 55).collect(Collectiors.toList());\nStatement 3) genXFriends.forEach(user -> user.sendMessage(\"Hi \" + user.getScreenName() + \"you are the best!\");\n\nComments:\n\n",
        "temperature": 0.1,
        "max_tokens": 100
      },
      "submittedTo": "play.aidungeon.io",
      "responseText": "Statement 1) // Obtain the names of the users in your list, and store them in a list.\n\nStatement 2) // Filter out users who are less than 40 years old or more than 55 years old. This is done by calling filter() on the stream returned by getFriends(). The resulting stream will be empty if no such user exists.\n\nStatement 3) // Create an instance of Collectors that contains all the lists you want to process."
    }
  ]
}